#src/genetic_algorithms_functions.py
import numpy as np

def calculate_fitness(route,
                      distance_matrix):
    """
    calculate_fitness function: total distance traveled by the car.

    Parameters:
        - route (list): A list representing the order of nodes visited in the route.
        - distance_matrix (numpy.ndarray): A matrix of the distances between nodes.
            A 2D numpy array where the element at position [i, j] represents the distance between node i and node j.
    Returns:
        - float: The negative total distance traveled (negative because we want to minimize distance).
           Returns a large negative penalty if the route is infeasible.
    """
    total_distance = 0

    # Iterate over each consecutive pair of nodes in the route.
    for i in range(len(route) - 1):
        node1 = route[i]
        node2 = route[i + 1]
        distance = distance_matrix[node1, node2]
        
        # If the distance is 10,000 (infeasible route), return a penalty.
        if distance == 10000:
            return -1e6
        
        total_distance += distance
    
    # Add the leg from the last node back to the depot (node 0) to complete the route.
    last_leg_distance = distance_matrix[route[-1], 0]
    if last_leg_distance == 10000:
        return -1e6
    total_distance += last_leg_distance
    
    # Return negative total distance because we want to minimize the distance.
    return -total_distance


def select_in_tournament(population,
                         scores,
                         number_tournaments=4,
                         tournament_size=3):
    """
    Tournament selection for genetic algorithm.

    Parameters:
        - population (list): The current population of routes.
        - scores (np.array): The calculate_fitness scores corresponding to each individual in the population.
        - number_tournaments (int): The number of the tournamnents to run in the population.
        - tournament_size (int): The number of individual to compete in the tournaments.

    Returns:
        - list: A list of selected individuals for crossover.
    """
    selected = []
    
    population_size = len(population)
    
    # Run the specified number of tournaments.
    for _ in range(number_tournaments):
        # Randomly select tournament_size unique indices from the population.
        idx = np.random.choice(population_size, tournament_size, replace=False)
        # Identify the index with the highest fitness score among the selected individuals.
        best_idx = idx[np.argmax(scores[idx])]
        # Append the best individual from this tournament to the selected list.
        selected.append(population[best_idx])
    
    return selected


def order_crossover(parent1, parent2):
    """
    Order crossover (OX) for permutations.

    Parameters:
        - parent1 (list): The first parent route.
        - parent2 (list): The second parent route.

    Returns:
        - list: The offspring route generated by the crossover.
    """
    size = len(parent1)
    start, end = sorted(np.random.choice(range(size), 2, replace=False))
    offspring = [None] * size
    offspring[start:end + 1] = parent1[start:end + 1]
    fill_values = [x for x in parent2 if x not in offspring[start:end + 1]]
    idx = 0
    for i in range(size):
        if offspring[i] is None:
            offspring[i] = fill_values[idx]
            idx += 1
    return offspring


def mutate(route,
           mutation_rate = 0.1):
    """
    Mutation operator: swap two nodes in the route.

    Parameters:
        - route (list): The route to mutate.
        - mutation_rate (float): The chance to mutate an individual.
    Returns:
        - list: The mutated route.
    """
    if np.random.rand() < mutation_rate:
        i, j = np.random.choice(len(route), 2, replace=False)
        route[i], route[j] = route[j], route[i]
    return route

def generate_unique_population(population_size, num_nodes):
    """
    Generate a unique population of individuals for a genetic algorithm.

    Each individual in the population represents a route in a graph, where the first node is fixed (0) and the 
    remaining nodes are a permutation of the other nodes in the graph. This function ensures that all individuals
    in the population are unique.

    Parameters:
        - population_size (int): The desired size of the population.
        - num_nodes (int): The number of nodes in the graph, including the starting node.

    Returns:
        - list of lists: A list of unique individuals, where each individual is represented as a list of node indices.
    """
    population = set()
    while len(population) < population_size:
        individual = [0] + list(np.random.permutation(np.arange(1, num_nodes)))
        population.add(tuple(individual))
    return [list(ind) for ind in population]
